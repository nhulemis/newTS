{"version":3,"sources":["assets\\Scripts\\Attractor.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n@ccclass\r\nexport default class Attractor extends cc.Component {\r\n\r\n    static attractor: Attractor = null;\r\n\r\n    collider:cc.SphereCollider3D = null;\r\n\r\n    gravity: number = -100;\r\n\r\n    Attact(object: cc.Node , dt: number)\r\n    {\r\n        let rbCar = object.getComponent(cc.RigidBody3D);\r\n        let gravityUp = object.position.sub(this.node.position).normalize();\r\n\r\n        rbCar.applyImpulse(gravityUp.mul(this.gravity),cc.Vec3.ZERO);\r\n\r\n        this.rotateBody(object,dt);\r\n    }\r\n    onLoad()\r\n    {\r\n        Attractor.attractor = this;\r\n    }\r\n\r\n    start () {\r\n        cc.director.getPhysics3DManager().enabled = true;\r\n        this.collider = this.getComponent(cc.SphereCollider3D);\r\n    }\r\n\r\n    update (dt) {\r\n        //this.Attact();\r\n    }\r\n\r\n    rotateBody(obj: cc.Node , dt : number)\r\n    {\r\n        //node.setRotation(cc.Quat.lerp(null,)\r\n\r\n        //Vector3 gravityUp = (body.position - transform.position).normalized;\r\n        let gravityUp = obj.position.sub(this.node.position).normalize();\r\n\r\n        //Quaternion targetRotation = Quaternion.FromToRotation(body.transform.up, gravityUp) * body.rotation;\r\n        let targetRotation =  cc.quat();\r\n        cc.Quat.rotationTo(targetRotation, obj.up , gravityUp).multiply(obj.getRotation(cc.quat()));\r\n\r\n        \r\n        obj.setRotation(Attractor.slerp(cc.quat(),obj.getRotation(cc.quat()),targetRotation,50*dt))\r\n    }\r\n\r\n    /**\r\n     * !#zh 四元数球面插值\r\n     * !#en Spherical quaternion interpolation\r\n     * @typescript\r\n     * slerp<Out extends IQuatLike, QuatLike_1 extends IQuatLike, QuatLike_2 extends IQuatLike>(out: Out, a: QuatLike_1, b: QuatLike_2, t: number): Out\r\n     * @static\r\n     */\r\n       static slerp<Out extends IQuatLike, QuatLike_1 extends IQuatLike, QuatLike_2 extends IQuatLike>\r\n        (out: Out, a: QuatLike_1, b: QuatLike_2, t: number) {\r\n        // benchmarks:\r\n        //    http://jsperf.com/quaternion-slerp-implementations\r\n\r\n        let scale0 = 0;\r\n        let scale1 = 0;\r\n\r\n        // calc cosine\r\n        let cosom = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;\r\n        // adjust signs (if necessary)\r\n        if (cosom < 0.0) {\r\n            cosom = -cosom;\r\n            b.x = -b.x;\r\n            b.y = -b.y;\r\n            b.z = -b.z;\r\n            b.w = -b.w;\r\n        }\r\n        // calculate coefficients\r\n        if ((1.0 - cosom) > 0.000001) {\r\n            // standard case (slerp)\r\n            const omega = Math.acos(cosom);\r\n            const sinom = Math.sin(omega);\r\n            scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n            scale1 = Math.sin(t * omega) / sinom;\r\n        } else {\r\n            // \"from\" and \"to\" quaternions are very close\r\n            //  ... so we can do a linear interpolation\r\n            scale0 = 1.0 - t;\r\n            scale1 = t;\r\n        }\r\n        // calculate final values\r\n        out.x = scale0 * a.x + scale1 * b.x;\r\n        out.y = scale0 * a.y + scale1 * b.y;\r\n        out.z = scale0 * a.z + scale1 * b.z;\r\n        out.w = scale0 * a.w + scale1 * b.w;\r\n\r\n        return out;\r\n    }\r\n\r\n    placeOnSurface(obj: cc.Node)\r\n    {\r\n        obj.position = obj.position.add(obj.forward.mul(this.node.scaleX * this.collider.radius * 0.01));\r\n    }\r\n}\r\n"]}